import * as React from "react"
import { Frame, addPropertyControls, ControlType, Color } from "framer"
import { indentTitle } from "./lib/indentTitle"

/*
 ** TOGGLE
 */

enum DefaultColor {
    blue = "rgba(0,153,255,1.0)",
    blue30 = "rgba(0,153,255,0.3)",
    blue0 = "rgba(0,153,255,0.0)",
    black = "rgba(0,0,0,1.0)",
    black8 = "rgba(0,0,0,.08)",
    white = "rgba(255,255,255,1.0)",
    smoke = "rgba(243,243,243,1.0)",
    clear = "rgba(255,255,255,0.0)",
}

enum PropControlMenu {
    Track = "track",
    Knob = "knob",
}

// @ts-ignore - Framer doesn't know about .values on Object
const propControlMenuVals = Object.values(PropControlMenu)
const propControlMenuKeys = Object.keys(PropControlMenu)

// COMPONENT

export function Toggle(props) {
    const {
        height,
        width,
        designMenu,

        // State
        toggled,
        disabled,
        disabledOpacity = 60,

        // Track
        trackTransition,
        trackOffset,
        trackColorOff,
        trackColorOn,
        trackBorder,
        trackBorderColor,
        trackBorderSize,
        trackRadius,
        isTrackRadiusMixed,
        trackRadiusTL,
        trackRadiusTR,
        trackRadiusBR,
        trackRadiusBL,

        // Knob
        knobTransition,
        knobSize,
        knobColorOff,
        knobColorOn,
        knobShadow,
        knobRadius,
        isKnobRadiusMixed,
        knobRadiusTL,
        knobRadiusTR,
        knobRadiusBR,
        knobRadiusBL,

        // Events
        onToggle,
        onToggleOn,
        onToggleOff,

        // Initial Animation
        initialAnimation,
    } = props

    // STATES //////////////////////////////////////////////////////////////////

    const [isToggled, setIsToggled] = React.useState(toggled)

    const [isDisabled, setIsDisabled] = React.useState(disabled)

    const [opacity, setOpacity] = React.useState(getOpacity(isDisabled, disabledOpacity))

    // LIFECYCLE ///////////////////////////////////////////////////////////////

    React.useEffect(() => {
        setIsToggled(toggled)
        // if (onToggle) onToggle(null, null, toggled)
        // if (onToggleOn && toggled) onToggleOn(null, null, toggled)
        // if (onToggleOff && !toggled) onToggleOff(null, null, toggled)
    }, [toggled])

    React.useEffect(() => {
        setIsDisabled(disabled)
        setOpacity(getOpacity(disabled, disabledOpacity))
    }, [disabled, disabledOpacity])

    // Render Variables ////////////////////////////////////////////////////////

    // Radius
    const fusedTrackRadius = getFusedRadius(
        trackRadius,
        isTrackRadiusMixed,
        trackRadiusTL,
        trackRadiusTR,
        trackRadiusBR,
        trackRadiusBL
    )
    const fusedKnobRadius = getFusedRadius(
        knobRadius,
        isKnobRadiusMixed,
        knobRadiusTL,
        knobRadiusTR,
        knobRadiusBR,
        knobRadiusBL
    )

    // Shadow
    const shadow = getShadow(isToggled, knobShadow, DefaultColor.black8, 0, 2, 4, 0)

    // Borders
    const borderOff = getBorder(trackBorder, trackBorderColor, trackBorderSize)
    const borderOn = getBorder(trackBorder, trackBorderColor, trackBorderSize)

    // Knob Position
    let inset = (height - knobSize) / 2
    if (inset < 0) inset = 0
    const left = -(width - knobSize) / 2 + inset + trackOffset
    const right = (width - knobSize) / 2 - inset + trackOffset * -1

    // VARIANTS //////////////////////////////////////////////////////////////////

    const variants = {
        track: {
            off: { background: trackColorOff, border: borderOff },
            on: { background: trackColorOn, border: borderOn },
        },
        knob: {
            off: { background: knobColorOff, x: left },
            on: { background: knobColorOn, x: right },
        },
    }

    const activeVariant = isToggled ? "on" : "off"

    // RENDER //////////////////////////////////////////////////////////////////

    return (
        <Frame
            name={"Toggle"}
            width={width}
            height={height}
            background={DefaultColor.clear}
            opacity={opacity}
            initial={false}
            data-framer-highlight={!disabled}
            radius={fusedTrackRadius}
            animate={activeVariant}
            center
            onTap={(event, point) => {
                if (isDisabled) return
                const c = !isToggled
                setIsToggled(c)
                if (onToggle) onToggle(event, point, c)
                if (onToggleOn && c) onToggleOn(event, point, c)
                if (onToggleOff && !c) onToggleOff(event, point, c)
            }}
        >
            <Frame
                name={"Track"}
                width={width}
                height={height}
                center
                radius={fusedTrackRadius}
                variants={variants.track}
                initial={activeVariant}
                transition={trackTransition}
            />
            <Frame
                name={"Knob"}
                size={knobSize}
                center={true}
                radius={fusedKnobRadius}
                shadow={shadow}
                variants={variants.knob}
                initial={activeVariant}
                transition={knobTransition}
            />
        </Frame>
    )
}

////////////////////////////////////////////////////////////////////////////////
// DEFAULT PROPS ///////////////////////////////////////////////////////////////

const defaultSize = {
    width: 54,
    height: 32,
    knob: 32 - 8,
    trackRadius: 32 / 2,
    trackBorder: 1,
    knobRadius: (32 - 8) / 2,
}

const defaultProps = {
    height: defaultSize.height,
    width: defaultSize.width,
    // PROP CONTROLS ONLY
    designMenu: propControlMenuVals[0],
    // STATES
    toggled: true,
    disabled: false,
    // TRACK
    trackOffset: 0,
    trackColorOff: DefaultColor.smoke,
    trackColorOn: DefaultColor.blue,
    trackBorder: false,
    trackBorderColor: DefaultColor.blue30,
    trackBorderSize: 0,
    trackRadius: defaultSize.trackRadius,
    isTrackRadiusMixed: false,
    trackRadiusTL: defaultSize.trackRadius,
    trackRadiusTR: defaultSize.trackRadius,
    trackRadiusBR: defaultSize.trackRadius,
    trackRadiusBL: defaultSize.trackRadius,
    // KNOB
    knobSize: defaultSize.knob,
    knobColorOff: DefaultColor.white,
    knobColorOn: DefaultColor.white,
    knobShadow: true,
    knobRadius: defaultSize.knobRadius,
    isKnobRadiusMixed: false,
    knobRadiusTL: defaultSize.knobRadius,
    knobRadiusTR: defaultSize.knobRadius,
    knobRadiusBR: defaultSize.knobRadius,
    knobRadiusBL: defaultSize.knobRadius,
    // Events
    onToggle: null,
    onToggleOn: null,
    onToggleOff: null,
    initialAnimation: false,
}

Toggle.defaultProps = defaultProps

////////////////////////////////////////////////////////////////////////////////
// Framer Property Controls ////////////////////////////////////////////////////

// Use for more indentation
// const LVL1 = "⠂ "
// const LVL2 = "  ⠂ "

// Indentation Helpers
const LVL1 = indentTitle("")
const LVL2 = "   " + indentTitle("")

addPropertyControls(Toggle, {
    // States ///////////////////////////////////////////////////////////////////

    toggled: {
        title: "Toggled",
        type: ControlType.Boolean,
        defaultValue: defaultProps.toggled,
        enabledTitle: "On",
        disabledTitle: "Off",
    },
    disabled: {
        title: "Disabled",
        type: ControlType.Boolean,
        defaultValue: defaultProps.disabled,
        enabledTitle: "Yes",
        disabledTitle: "No",
    },
    // removing for now, weird stuff going on
    // initialAnimation: {
    //     title: "On Load",
    //     type: ControlType.Boolean,
    //     enabledTitle: "Animate",
    //     disabledTitle: "Instant",
    // },

    // Menu ////////////////////////////////////////////////////////////////////

    designMenu: {
        title: "Style",
        type: ControlType.Enum,
        defaultValue: defaultProps.designMenu,
        options: propControlMenuVals,
        optionTitles: propControlMenuKeys,
        displaySegmentedControl: true,
    },

    // Track ///////////////////////////////////////////////////////////////////

    trackTransition: {
        title: `${LVL1}Transition`,
        type: ControlType.Transition,
        hidden: props => props.designMenu != PropControlMenu.Track,
    },

    trackOffset: {
        title: `${LVL1}Offset`,
        type: ControlType.Number,
        defaultValue: defaultProps.trackOffset,
        step: 0.5,
        displayStepper: true,
        hidden: props => props.designMenu != PropControlMenu.Track,
    },
    trackRadius: {
        type: ControlType.FusedNumber,
        title: `${LVL1}Radius`,
        defaultValue: defaultProps.trackRadius,
        toggleKey: "isTrackRadiusMixed",
        toggleTitles: ["All", "Individual"],
        valueKeys: ["trackRadiusTL", "trackRadiusTR", "trackRadiusBR", "trackRadiusBL"],
        valueLabels: ["TL", "TR", "BR", "BL"],
        min: 0,
        hidden: props => props.designMenu != PropControlMenu.Track,
    },
    trackColorOff: {
        title: `${LVL1}Color Off`,
        type: ControlType.Color,
        defaultValue: defaultProps.trackColorOff,
        hidden: props => props.designMenu != PropControlMenu.Track,
    },
    trackColorOn: {
        title: `${LVL1}Color On`,
        type: ControlType.Color,
        defaultValue: defaultProps.trackColorOn,
        hidden: props => props.designMenu != PropControlMenu.Track,
    },
    trackBorder: {
        title: `${LVL1}Border`,
        type: ControlType.Boolean,
        defaultValue: defaultProps.trackBorder,
        enabledTitle: "Yes",
        disabledTitle: "No",
        hidden: props => props.designMenu != PropControlMenu.Track,
    },
    trackBorderColor: {
        title: `${LVL2}Color`,
        type: ControlType.Color,
        defaultValue: defaultProps.trackBorderColor,
        hidden: props => props.designMenu != PropControlMenu.Track || !props.trackBorder,
    },
    trackBorderSize: {
        title: `${LVL2}Size On`,
        type: ControlType.Number,
        defaultValue: defaultProps.trackBorderSize,
        min: 0,
        step: 0.5,
        displayStepper: true,
        hidden: props => props.designMenu != PropControlMenu.Track || !props.trackBorder,
    },

    // Knob ////////////////////////////////////////////////////////////////////

    knobTransition: {
        title: `${LVL1}Transition`,
        type: ControlType.Transition,
        hidden: props => props.designMenu != PropControlMenu.Knob,
    },

    knobSize: {
        title: `${LVL1}Size`,
        type: ControlType.Number,
        defaultValue: defaultProps.knobSize,
        min: 0,
        step: 0.5,
        displayStepper: true,
        hidden: props => props.designMenu != PropControlMenu.Knob,
    },
    knobRadius: {
        type: ControlType.FusedNumber,
        title: `${LVL1}Radius`,
        defaultValue: defaultProps.knobRadius,
        toggleKey: "isKnobRadiusMixed",
        toggleTitles: ["All", "Individual"],
        valueKeys: ["knobRadiusTL", "knobRadiusTR", "knobRadiusBR", "knobRadiusBL"],
        valueLabels: ["TL", "TR", "BR", "BL"],
        min: 0,
        hidden: props => props.designMenu != PropControlMenu.Knob,
    },
    knobColorOff: {
        title: `${LVL1}Color Off`,
        type: ControlType.Color,
        defaultValue: defaultProps.knobColorOff,
        hidden: props => props.designMenu != PropControlMenu.Knob,
    },
    knobColorOn: {
        title: `${LVL1}Color On`,
        type: ControlType.Color,
        defaultValue: defaultProps.knobColorOn,
        hidden: props => props.designMenu != PropControlMenu.Knob,
    },
    knobShadow: {
        title: `${LVL1}Shadow`,
        type: ControlType.Boolean,
        defaultValue: defaultProps.knobShadow,
        enabledTitle: "Yes",
        disabledTitle: "No",
        hidden: props => props.designMenu != PropControlMenu.Knob,
    },

    // Events ////////////////////////////////////////////////////////////////////

    onToggle: { type: ControlType.EventHandler },
    onToggleOn: { type: ControlType.EventHandler },
    onToggleOff: { type: ControlType.EventHandler },
})

////////////////////////////////////////////////////////////////////////////////
// ACTION CONTROLS

////////////////////////////////////////////////////////////////////////////////
// HELPER FUNCTIONS

const normalizeColor = color => {
    // Translations between HSL to HEX and others are a problem
    if (!Color.isColor(color)) return color
    const c = Color(color)
    const RGBA = Color.toRgb(c)
    return `rgba(${RGBA.r}, ${RGBA.g}, ${RGBA.b}, ${RGBA.a})`
}

const getFusedRadius = (radius, isMixed, tl, tr, br, bl) => {
    return isMixed ? `${tl}px ${tr}px ${br}px ${bl}px` : `${radius}px`
}

const getOpacity = (isDisabled, disabledOpacity) => (isDisabled ? disabledOpacity / 100 : 1)

const getBorder = (hasBorder, color, size) => {
    if (!hasBorder) return `0px solid ${DefaultColor.clear}`
    return `${size}px solid ${normalizeColor(color)}`
}

const getShadow = (toggled, hasShadow, color, x, y, blur, spread) => {
    if (!hasShadow) return `0px 0px 0px 0px ${DefaultColor.clear}`
    return `${x}px ${y}px ${blur}px ${spread}px ${color}`
}
