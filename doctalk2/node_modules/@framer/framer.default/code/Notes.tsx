import * as React from "react"
import { Stack, addPropertyControls, ControlType, RenderTarget, Color } from "framer"
import { defaultEvents, fontStack } from "./lib/constants"

/*
 **   STICKY
 **
 ** - type should scale for tiny ones
 ** - fix truncation
 ** - "approved/done" yes, no - makes a checkmark appear on it
 */

const colors = {
    blue: "#0099FF",
    darkBlue: "#0066ff",
    purple: "#8855FF",
    red: "#FF5588",
    green: "#22CC66",
    yellow: "#FFBB00",
}

export function Notes(props) {
    const {
        note = "",
        color,
        preview,
        alignment,
        smallFont,
        onClick,
        onMouseEnter,
        onMouseLeave,
        onMouseDown,
        onMouseUp,
        useScriptFont,
    } = props

    const [baseColorString, backgroundColorString] = React.useMemo(() => {
        const baseColor = Color(colors[color])
        const hslColor = Color.toHsl(baseColor)
        hslColor.l = 0.95

        const baseColorString = Color(colors[color]).toValue()
        const backgroundColorString = Color(hslColor).toValue()

        return [baseColorString, backgroundColorString]
    }, [color])

    const centerAligned = alignment === "center"

    return (
        <div
            style={{
                flex: 1,
                width: "100%",
                height: "100%",
                display: "flex",
                alignItems: centerAligned ? "center" : "flex-start",
                backgroundColor: backgroundColorString,
                overflow: "hidden",
                paddingLeft: smallFont ? 15 : 18,
                paddingTop: centerAligned ? 0 : useScriptFont ? 12 : 14,
                paddingRight: smallFont ? 15 : 18,
                borderRadius: 8,
                visibility: RenderTarget.current() === RenderTarget.preview && !preview ? "hidden" : "visible",
                fontFamily: useScriptFont ? "Nanum Pen Script" : fontStack,
                //@ts-ignore
                fontDisplay: "fallback",
            }}
            {...{ onClick, onMouseEnter, onMouseLeave, onMouseDown, onMouseUp }}
        >
            <link href="https://fonts.googleapis.com/css?family=Nanum+Pen+Script&display=swap" rel="stylesheet" />
            <p
                style={{
                    width: "100%",
                    margin: 0,
                    fontSize: smallFont ? (useScriptFont ? 18 : 12) : useScriptFont ? 32 : 24,
                    overflowWrap: "break-word",
                    lineHeight: smallFont ? (useScriptFont ? 1.15 : 1.4) : useScriptFont ? 1.08 : 1.3,
                    textAlign: alignment,
                    color: baseColorString,
                    display: "-webkit-box",
                    // lineClamp: 7,
                    WebkitBoxOrient: "vertical",
                    // WebkitLineClamp: 7,
                    whiteSpace: "pre-wrap",
                }}
            >
                {note.length > 0 ? note : "Write something..."}
            </p>
        </div>
    )
}

Notes.defaultProps = {
    useScriptFont: false,
    color: "blue",
    width: 180,
    height: 180,
}

addPropertyControls(Notes, {
    note: {
        type: ControlType.String,
        displayTextArea: true,
        placeholder: `Write somethingâ€¦ \n\n\n`,
    },
    color: {
        type: ControlType.Enum,
        defaultValue: "blue",
        options: Object.keys(colors),
        optionTitles: Object.keys(colors).map(c => c.replace(/^\w/, c => c.toUpperCase())),
    },

    alignment: {
        title: "Text Align",
        type: ControlType.Enum,
        displaySegmentedControl: true,
        optionTitles: ["Left", "Center", "Right"],
        options: ["left", "center", "right"],
    },
    useScriptFont: {
        type: ControlType.Boolean,
        disabledTitle: "Default",
        enabledTitle: "Script",
        title: "Font",
    },
    smallFont: {
        type: ControlType.Boolean,
        disabledTitle: "Big",
        enabledTitle: "Small",
        title: "Text Size",
    },
    preview: {
        type: ControlType.Boolean,
        defaultValue: true,
        title: "In Preview",
        enabledTitle: "Show",
        disabledTitle: "Hide",
    },
    ...defaultEvents,
})

Notes.displayName = "Sticky Note"
