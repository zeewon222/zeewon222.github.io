import * as React from "react"
import { useEffect, useState } from "react"
import { addPropertyControls, ControlType } from "framer"
import * as urls from "./lib/urls"
import { emptyStateStyle, defaultEvents } from "./lib/constants"

/*
 ** UPSPLASH
 */

export interface UnsplashProps {
    search: any
    size: any
    id: any
    lockImage: any
    radius: number
    topLeft: number
    topRight: number
    bottomRight: number
    bottomLeft: number
    isMixed: boolean
    onClick?: any
    onMouseEnter?: any
    onMouseLeave?: any
    onMouseDown?: any
    onMouseUp?: any
}

export function Unsplash({
    search,
    size,
    radius,
    id,
    lockImage,
    topLeft,
    topRight,
    bottomRight,
    bottomLeft,
    isMixed,
    onClick,
    onMouseEnter,
    onMouseLeave,
    onMouseDown,
    onMouseUp,
}: UnsplashProps) {
    const key = `unsplash_${id.includes("id_") ? id.substring(3, id.length) : id}`
    const cache = localStorage.getItem(key) ? JSON.parse(localStorage.getItem(key)) : {}
    const [url, setUrl] = useState(cache.imageUrl || null)
    const selectedSize = (Sizes[size] as any) + 1

    const borderRadius = isMixed ? `${topLeft}px ${topRight}px ${bottomRight}px ${bottomLeft}px` : `${radius}px`

    async function getAndSetImageUrl() {
        const initialSize = 400
        const route = search === "" ? "/random" : `/featured`
        const url = `${urls.unsplashBase}${route}/${initialSize}x${initialSize}?${search}`
        const response = await fetch(url)

        localStorage.setItem(key, JSON.stringify({ search, imageUrl: response.url }))
        return setUrl(response.url)
    }

    useEffect(() => {
        const cache = localStorage.getItem(key) ? JSON.parse(localStorage.getItem(key)) : {}
        if (!lockImage || search !== cache.search) getAndSetImageUrl()
    }, [search, size, lockImage])

    let imageUrl = url
    // Modifying url to grab larger size if needed
    if (imageUrl && selectedSize > 1) {
        const sizedUrl = new URL(url)
        const w = parseInt(sizedUrl.searchParams.get("w")) * selectedSize
        const h = parseInt(sizedUrl.searchParams.get("h")) * selectedSize
        sizedUrl.searchParams.set("w", w + "")
        sizedUrl.searchParams.set("h", h + "")
        imageUrl = sizedUrl.toJSON()
    }

    const style: React.CSSProperties = {
        ...emptyStateStyle,
        border: "none",
        backgroundImage: `url(${imageUrl || "https://static.framer.com/placeholder.png"})`,
        backgroundSize: "cover",
        backgroundPosition: "center",
        borderRadius,
    }

    return <div style={style} {...{ onClick, onMouseEnter, onMouseLeave, onMouseDown, onMouseUp }} />
}

Unsplash.defaultProps = {
    search: "",
    size: "S",
    link: "https://static.framer.com/placeholder.png",
    image: "",
    radius: 0,
    lockImage: true,
}

addPropertyControls(Unsplash, {
    search: {
        type: ControlType.String,
        title: "Search",
        placeholder: "Nature, Citiesâ€¦",
    },
    lockImage: {
        type: ControlType.Boolean,
        title: "Shuffle",
        enabledTitle: "No",
        disabledTitle: "Yes",
        defaultValue: true,
    },
    size: {
        type: ControlType.Enum,
        title: "Resolution",
        options: ["S", "M", "L", "XL"],
        displaySegmentedControl: true,
    },
    radius: {
        title: "Radius",
        type: ControlType.FusedNumber,
        defaultValue: Unsplash.defaultProps.radius,
        toggleKey: "isMixed",
        toggleTitles: ["Radius", "Radius per corner"],
        valueKeys: ["topLeft", "topRight", "bottomRight", "bottomLeft"],
        valueLabels: ["TL", "TR", "BR", "BL"],
        min: 0,
    },
    ...defaultEvents,
})

enum Sizes {
    S,
    M,
    L,
    XL,
}
