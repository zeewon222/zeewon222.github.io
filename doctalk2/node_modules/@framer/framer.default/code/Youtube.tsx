import * as React from "react"
import { ControlType, addPropertyControls, RenderTarget } from "framer"
import { defaultEvents } from "./lib/constants"

/*
 ** YOUTUBE
 */

interface Props {
    url: string
    play: string
    controls: string
}

enum YoutubeSettings {
    playNormal = "Off",
    playAuto = "On",
    playLoop = "Loop",
    controlsPlayback = "Playback",
    controlsInfo = "Video Info",
    controlsNone = "None",
}

export function Youtube<Props>(props) {
    const { url, play, controls = false, onClick, onMouseEnter, onMouseLeave, onMouseDown, onMouseUp } = props

    const guessIdentifier = (urlMaybe: string): string | null => {
        if (!urlMaybe) return null

        let identifier = ""

        // https://www.youtube.com/watch?v=cAs3senSITIve
        const watchPrefix = "youtube.com/watch?v="
        const watchIndex = urlMaybe.indexOf(watchPrefix)
        if (watchIndex >= 0) {
            identifier = urlMaybe.substring(watchIndex + watchPrefix.length)
        } else {
            // https://www.youtube.com/embed/cAs3senSITIve
            const embedPrefix = "youtube.com/embed/"
            const embedIndex = urlMaybe.indexOf(embedPrefix)
            if (embedIndex >= 0) {
                identifier = urlMaybe.substring(embedIndex + embedPrefix.length)
            } else {
                // https://youtu.be/cAs3senSITIve
                const shortenedPrefix = "youtu.be/"
                const shortenedIndex = urlMaybe.indexOf(shortenedPrefix)
                if (shortenedIndex >= 0) {
                    identifier = urlMaybe.substring(shortenedIndex + shortenedPrefix.length)
                } else {
                    // Everything else
                    identifier = urlMaybe
                }
            }
        }

        // Strip off the query string, if any
        const queryIndex = identifier.indexOf("?")
        if (queryIndex >= 0) {
            identifier = identifier.substring(0, queryIndex)
        }

        // What's left might be an identifier
        return identifier.match(/[\w_]+/) ? identifier : null
    }

    const identifier = guessIdentifier(url || this.defaultProps.url) || "none"
    const autoplay =
        RenderTarget.current() == RenderTarget.preview &&
        (play === YoutubeSettings.playAuto || play === YoutubeSettings.playLoop)
    const loop = autoplay && play === YoutubeSettings.playLoop
    const mute = autoplay
    const showsInfo = controls === YoutubeSettings.controlsInfo
    const showsControls = controls === YoutubeSettings.controlsPlayback

    // Notes on https://developers.google.com/youtube/player_parameters
    // If "controls" is defined at all, an inactive video will get a Youtube logo in the corner
    let src = `https://www.youtube.com/embed/${identifier}?playlist=${identifier}&showinfo=${
        showsInfo ? "1" : "0"
    }&autoplay=${autoplay ? "1" : "0"}&loop=${loop ? "1" : "0"}&mute=${
        mute ? "1" : "0"
    }&iv_load_policy=3&rel=0&?modestbranding=1&playsinline=1`
    if (showsControls || autoplay) {
        src += "&controls=" + (showsControls ? "1" : "0")
    }

    return (
        <iframe
            width={"100%"}
            height={"100%"}
            {...{ onClick, onMouseEnter, onMouseLeave, onMouseDown, onMouseUp }}
            frameBorder={0}
            src={src}
        />
    )
}

Youtube.displayName = "YouTube"

addPropertyControls(Youtube, {
    url: { type: ControlType.String, title: "Video" },
    play: {
        type: ControlType.Enum,
        title: "Autoplay",
        options: [YoutubeSettings.playNormal, YoutubeSettings.playAuto, YoutubeSettings.playLoop],
    },
    ...defaultEvents,
})

Youtube.defaultProps = {
    url: "https://www.youtube.com/watch?v=ITAynr5m0uU",
    controls: YoutubeSettings.controlsPlayback,
    play: YoutubeSettings.playNormal,
    width: 375,
    height: 210,
}
