import { useEffect, useRef } from "react"

// Some prop helpers to solve rerender issues

type Obj = Record<string | number | symbol, unknown>

// Comparison function for React.Memo
export default function shallow<T extends any, U extends any>(objA: T, objB: U) {
    if (Object.is(objA, objB)) {
        return true
    }
    if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false
    }
    const keysA = Object.keys(objA as object)
    if (keysA.length !== Object.keys(objB as object).length) {
        return false
    }
    for (let i = 0; i < keysA.length; i++) {
        if (
            !Object.prototype.hasOwnProperty.call(objB, keysA[i]) ||
            !Object.is((objA as Obj)[keysA[i]], (objB as Obj)[keysA[i]])
        ) {
            return false
        }
    }
    return true
}

export function compareProps<T extends any>(objA: T, objB: T) {
    for (const key in objA) {
        if (Object.keys(objB).length < 2) return
        if (objA[key] !== objB[key]) {
            console.log(`${key}: ${objA[key]}`)
        }
    }
}

export function useCompareProps(props) {
    const oldProps = useRef<any>()

    useEffect(() => {
        compareProps(props, oldProps)
        oldProps.current = props
    })
}
