import * as React from "react"
import { motion, addPropertyControls, ControlType, MotionStyle } from "framer"
import { colorTokentoValue } from "./lib/colorFromToken"
import { defaultEvents, fontControls, fontSizeOptions } from "./lib/constants"

/*
 ** BUTTON
 */

export interface ButtonProps {
    text: string
    fontSize: number
    defaultBackground: string
    defaultTextColor: string
    hoverBackground: string
    hoverTextColor: string
    pressedBackground: any
    pressedTextColor: any
    disabledBackground: any
    disabledTextColor: any
    shadow: boolean
    variant: string
    onTap: any
    radius: number
    topLeft: number
    topRight: number
    bottomRight: number
    bottomLeft: number
    isMixed: boolean
    paddingPerSide: boolean
    padding: number
    paddingTop: number
    paddingRight: number
    paddingBottom: number
    paddingLeft: number
    colorTransition: any
    scaleTransition: any
    whileTapScale: number
    whileHoverScale: number
    disabled: boolean
    alignment: string
    onClick?: any
    onMouseEnter?: any
    onMouseLeave?: any
    onMouseDown?: any
    onMouseUp?: any
    font: boolean
    fontFamily?: string
    fontWeight?: number
}

export function Button({
    text,
    fontSize,
    defaultBackground,
    defaultTextColor,
    hoverBackground,
    hoverTextColor,
    pressedBackground,
    pressedTextColor,
    disabledBackground,
    disabledTextColor,
    shadow,
    variant,
    onClick,
    onMouseEnter,
    onMouseLeave,
    onMouseDown,
    onMouseUp,
    radius,
    topLeft,
    topRight,
    bottomRight,
    bottomLeft,
    isMixed,
    paddingPerSide,
    padding,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    whileHoverScale,
    whileTapScale,
    colorTransition,
    scaleTransition,
    alignment,
    disabled,
    fontFamily,
    fontWeight,
}: ButtonProps) {
    const borderRadius = isMixed ? `${topLeft}px ${topRight}px ${bottomRight}px ${bottomLeft}px` : `${radius}px`
    const paddingValue = paddingPerSide
        ? `${paddingTop}px ${paddingRight}px ${paddingBottom}px ${paddingLeft}px`
        : padding

    const variants = {
        default: {
            background: colorTokentoValue(defaultBackground),
            color: colorTokentoValue(defaultTextColor),
            scale: 1,
            boxShadow: shadow
                ? "0px 2px 6px rgba(0,0,0,0.1), 0px 4px 16px rgba(0,0,0,0.1)"
                : "0px 0px 0px rgba(0,0,0,0)",
        },
        hover: {
            background: colorTokentoValue(hoverBackground),
            color: colorTokentoValue(hoverTextColor),
            scale: whileHoverScale,
            boxShadow: shadow
                ? "0px 2px 6px rgba(0,0,0,0.1), 0px 4px 16px rgba(0,0,0,0.1)"
                : "0px 0px 0px rgba(0,0,0,0)",
        },
        pressed: {
            background: colorTokentoValue(pressedBackground),
            color: colorTokentoValue(pressedTextColor),
            scale: whileTapScale,
            shadow: shadow ? "0px 1px 4px rgba(0,0,0,0.2), 0px 2px 4px rgba(0,0,0,0.2)" : "0px 0px 0px rgba(0,0,0,0)",
        },
        disabled: {
            background: colorTokentoValue(disabledBackground),
            color: colorTokentoValue(disabledTextColor),
            scale: 1,
            boxShadow: shadow
                ? "0px 2px 6px rgba(0,0,0,0.1), 0px 4px 16px rgba(0,0,0,0.1)"
                : "0px 0px 0px rgba(0,0,0,0)",
        },
    }

    // variant as a prop
    // whene TOGGLED it should animate
    const isDisabled = variant === "Disabled" || disabled
    const activeVariant = isDisabled ? "disabled" : variant.toLowerCase()

    const fontStyle = {
        ...(fontFamily && { fontFamily }),
        fontWeight,
    }

    const buttonStyles = {
        ...style,
        ...fontStyle,
        fontSize,
        borderRadius,
        padding: paddingValue,
        textAlign: alignment,
    } as MotionStyle

    return (
        <motion.button
            type="button"
            transition={{ scale: scaleTransition, default: colorTransition }}
            style={buttonStyles}
            initial={activeVariant}
            animate={activeVariant}
            variants={variants}
            disabled={isDisabled}
            data-framer-highlight={!isDisabled}
            whileHover="hover"
            whileTap="pressed"
            {...(!isDisabled && {
                onClick,
                onMouseEnter,
                onMouseLeave,
                onMouseDown,
                onMouseUp,
            })}
        >
            {text}
        </motion.button>
    )
}

Button.defaultProps = {
    height: 50,
    width: 90,
    text: "Tap",
    variant: "Default",
    shadow: false,
    fontSize: 16,
    defaultBackground: "#0099FF",
    defaultTextColor: "#ffffff",
    hoverBackground: "#0077FF",
    hoverTextColor: "#ffffff",
    pressedBackground: "#0088FF",
    pressedTextColor: "#ffffff",
    disabledBackground: "#f3f3f3",
    disabledTextColor: "#AAAAAA",
    disabled: false,
    radius: 8,
    padding: 10,
    whileTapScale: 0.95,
    whileHoverScale: 1.1,
    alignment: "center",
    fontWeight: 600,
    scaleTransition: {
        type: "spring",
        duration: 0.3,
        delay: 0,
        stiffness: 600,
        damping: 30,
        mass: 1,
    },
}

const style: React.CSSProperties = {
    border: "none",
    width: "100%",
    position: "absolute",
    margin: 0,
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    color: "white",
    outline: "none",
    resize: "none",
    WebkitTapHighlightColor: "rgba(0, 0, 0, 0)",
    letterSpacing: "-0.2px",
}

addPropertyControls(Button, {
    text: {
        title: "Text",
        type: ControlType.String,
        defaultValue: Button.defaultProps.text,
    },
    alignment: {
        title: "Text Align",
        type: ControlType.Enum,
        displaySegmentedControl: true,
        optionTitles: ["Left", "Center", "Right"],
        options: ["left", "center", "right"],
    },
    shadow: {
        title: "Shadow",
        type: ControlType.Boolean,
        enabledTitle: "Show",
        disabledTitle: "Hide",
    },
    ...fontControls,
    disabled: {
        title: "Disabled",
        type: ControlType.Boolean,
        enabledTitle: "Yes",
        disabledTitle: "No",
    },
    variant: {
        title: "Variant",
        type: ControlType.Enum,
        defaultValue: "Default",
        options: ["Default", "Hover", "Pressed", "Disabled"],
    },
    defaultBackground: {
        title: "Bg Color",
        type: ControlType.Color,
        defaultValue: Button.defaultProps.defaultBackground,
        hidden: ({ variant }) => variant !== "Default",
    },
    defaultTextColor: {
        title: "Text Color",
        type: ControlType.Color,
        defaultValue: Button.defaultProps.defaultTextColor,
        hidden: ({ variant }) => variant !== "Default",
    },
    hoverBackground: {
        title: "Bg Color",
        type: ControlType.Color,
        defaultValue: Button.defaultProps.hoverBackground,
        hidden: ({ variant }) => variant !== "Hover",
    },
    hoverTextColor: {
        title: "Text Color",
        type: ControlType.Color,
        defaultValue: Button.defaultProps.hoverTextColor,
        hidden: ({ variant }) => variant !== "Hover",
    },
    pressedBackground: {
        title: "Bg Color",
        type: ControlType.Color,
        defaultValue: Button.defaultProps.pressedBackground,
        hidden: ({ variant }) => variant !== "Pressed",
    },
    pressedTextColor: {
        title: "Text Color",
        type: ControlType.Color,
        defaultValue: Button.defaultProps.pressedTextColor,
        hidden: ({ variant }) => variant !== "Pressed",
    },
    disabledBackground: {
        title: "Bg Color",
        type: ControlType.Color,
        defaultValue: Button.defaultProps.disabledBackground,
        hidden: ({ variant }) => variant !== "Disabled",
    },
    disabledTextColor: {
        title: "Text Color",
        type: ControlType.Color,
        defaultValue: Button.defaultProps.disabledTextColor,
        hidden: ({ variant }) => variant !== "Disabled",
    },
    padding: {
        title: "Padding",
        type: ControlType.FusedNumber,
        toggleKey: "paddingPerSide",
        toggleTitles: ["Padding", "Padding per side"],
        valueKeys: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
        valueLabels: ["T", "R", "B", "L"],
        min: 0,
    },
    radius: {
        title: "Radius",
        type: ControlType.FusedNumber,
        defaultValue: Button.defaultProps.radius,
        toggleKey: "isMixed",
        toggleTitles: ["Radius", "Radius per corner"],
        valueKeys: ["topLeft", "topRight", "bottomRight", "bottomLeft"],
        valueLabels: ["TL", "TR", "BR", "BL"],
        min: 0,
    },
    fontSize: {
        ...(fontSizeOptions as any),
    },
    whileHoverScale: {
        title: "Hover Scale",
        type: ControlType.Number,
        min: 0.5,
        max: 1.5,
        step: 0.1,
    },
    whileTapScale: {
        title: "Tap Scale",
        type: ControlType.Number,
        min: 0.5,
        max: 1.5,
        step: 0.1,
    },
    scaleTransition: {
        title: "Scale Anim",
        type: ControlType.Transition,
    },
    colorTransition: {
        title: "Color Anim",
        type: ControlType.Transition,
    },
    ...defaultEvents,
})
