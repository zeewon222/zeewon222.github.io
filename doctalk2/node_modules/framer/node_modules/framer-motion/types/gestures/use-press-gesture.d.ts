import { TargetAndTransition } from "../types";
import { Point2D } from "../types/geometry";
import { VisualElement } from "../render/VisualElement";
import { VariantLabels } from "../motion/types";
/**
 * Passed in to tap event handlers like `onPress` the `PressInfo` object contains
 * information about the tap gesture such as itâ€˜s location.
 *
 * @library
 *
 * ```jsx
 * function onPress(event, info) {
 *   console.log(info.point.x, info.point.y)
 * }
 *
 * <Frame onPress={onPress} />
 * ```
 *
 * @motion
 *
 * ```jsx
 * function onPress(event, info) {
 *   console.log(info.point.x, info.point.y)
 * }
 *
 * <motion.div onPress={onPress} />
 * ```
 *
 * @public
 */
export interface PressInfo {
    /**
     * Contains `x` and `y` values for the tap gesture relative to the
     * device or page.
     *
     * @library
     *
     * ```jsx
     * function onPressStart(event, info) {
     *   console.log(info.point.x, info.point.y)
     * }
     *
     * <Frame onPressStart={onPressStart} />
     * ```
     *
     * @motion
     *
     * ```jsx
     * function onPressStart(event, info) {
     *   console.log(info.point.x, info.point.y)
     * }
     *
     * <motion.div onPressStart={onPressStart} />
     * ```
     *
     * @public
     */
    point: Point2D;
}
/**
 * @public
 */
export interface PressHandlers {
    /**
     * Callback when the tap gesture successfully ends on this element.
     *
     * @library
     *
     * ```jsx
     * function onPress(event, info) {
     *   console.log(info.point.x, info.point.y)
     * }
     *
     * <Frame onPress={onPress} />
     * ```
     *
     * @motion
     *
     * ```jsx
     * function onPress(event, info) {
     *   console.log(info.point.x, info.point.y)
     * }
     *
     * <motion.div onPress={onPress} />
     * ```
     *
     * @param event - The originating pointer event.
     * @param info - An {@link PressInfo} object containing `x` and `y` values for the `point` relative to the device or page.
     */
    onPress?(event: MouseEvent | TouchEvent | PointerEvent, info: PressInfo): void;
    /**
     * Callback when the tap gesture starts on this element.
     *
     * @library
     *
     * ```jsx
     * function onPressStart(event, info) {
     *   console.log(info.point.x, info.point.y)
     * }
     *
     * <Frame onPressStart={onPressStart} />
     * ```
     *
     * @motion
     *
     * ```jsx
     * function onPressStart(event, info) {
     *   console.log(info.point.x, info.point.y)
     * }
     *
     * <motion.div onPressStart={onPressStart} />
     * ```
     *
     * @param event - The originating pointer event.
     * @param info - An {@link PressInfo} object containing `x` and `y` values for the `point` relative to the device or page.
     */
    onPressStart?(event: MouseEvent | TouchEvent | PointerEvent, info: PressInfo): void;
    /**
     * Callback when the tap gesture ends outside this element.
     *
     * @library
     *
     * ```jsx
     * function onPressCancel(event, info) {
     *   console.log(info.point.x, info.point.y)
     * }
     *
     * <Frame onPressCancel={onPressCancel} />
     * ```
     *
     * @motion
     *
     * ```jsx
     * function onPressCancel(event, info) {
     *   console.log(info.point.x, info.point.y)
     * }
     *
     * <motion.div onPressCancel={onPressCancel} />
     * ```
     *
     * @param event - The originating pointer event.
     * @param info - An {@link PressInfo} object containing `x` and `y` values for the `point` relative to the device or page.
     */
    onPressCancel?(event: MouseEvent | TouchEvent | PointerEvent, info: PressInfo): void;
    /**
     * Properties or variant label to animate to while the component is pressed.
     *
     * @library
     *
     * ```jsx
     * <Frame whilePress={{ scale: 0.8 }} />
     * ```
     *
     * @motion
     *
     * ```jsx
     * <motion.div whilePress={{ scale: 0.8 }} />
     * ```
     */
    whilePress?: VariantLabels | TargetAndTransition;
}
/**
 * @param handlers -
 * @internal
 */
export declare function usePressGesture({ onPress, onPressStart, onPressCancel, whilePress }: PressHandlers, visualElement: VisualElement): void;
