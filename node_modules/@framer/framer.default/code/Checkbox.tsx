import * as React from "react"
import { useState, useEffect } from "react"
import { addPropertyControls, ControlType, motion, Color, RenderTarget } from "framer"
import { colorFromToken } from "./lib/colorFromToken"
import { indentTitle } from "./lib/indentTitle"

/*
 ** CHECKBOX
 */

export interface CheckboxProps {
    tint: string
    onToggle: () => void
    onCheck: () => void
    onUncheck: () => void
    isChecked: boolean
    radius: number
    topLeft: number
    topRight: number
    bottomRight: number
    bottomLeft: number
    isMixed: boolean
    checkSize: number
    color: string
    inactiveBorder: string
}

export function Checkbox({
    activeBackground,
    onToggle,
    onCheck,
    onUncheck,
    isChecked,
    radius,
    topLeft,
    topRight,
    bottomRight,
    bottomLeft,
    isMixed,
    checkSize,
    color,
    inactiveBackground,
    inactiveBorder,
    activeBorder,
    hasBorder,
    borderWidth,
    transition,
    initialAnimation,
    disabled,
}) {
    const [checked, setChecked] = useState(isChecked)
    const borderRadius = isMixed ? `${topLeft}px ${topRight}px ${bottomRight}px ${bottomLeft}px` : `${radius}px`

    useEffect(() => {
        setChecked(isChecked)
    }, [isChecked])

    initialAnimation = RenderTarget.current() !== RenderTarget.preview ? false : initialAnimation

    const inactiveBorderStyle = `${borderWidth}px solid ${Color(colorFromToken(inactiveBorder)).toValue()}`
    const activeBorderStyle = `${borderWidth}px solid ${Color(colorFromToken(activeBorder)).toValue()}`

    return (
        <div style={containerStyle} data-framer-highlight={!disabled}>
            <motion.div
                // @ts-ignore
                style={{ ...checkboxStyle, borderRadius }}
                initial={
                    initialAnimation
                        ? {
                              background: checked
                                  ? Color(colorFromToken(inactiveBackground)).toValue()
                                  : Color(colorFromToken(activeBackground)).toValue(),
                          }
                        : false
                }
                animate={{
                    background: checked
                        ? Color(colorFromToken(activeBackground)).toValue()
                        : Color(colorFromToken(inactiveBackground)).toValue(),
                    border: hasBorder ? (checked ? activeBorderStyle : inactiveBorderStyle) : "none",
                }}
                transition={transition}
                onTap={() => {
                    if (disabled) return
                    setChecked(!checked)
                    if (onToggle) onToggle()
                    if (onCheck && !checked) onCheck()
                    if (onUncheck && checked) onUncheck()
                }}
            >
                <svg
                    viewBox="0 0 12 12"
                    style={{
                        margin: 1,
                        width: `${checkSize}%`,
                        height: `${checkSize}%`,
                    }}
                >
                    <motion.path
                        d="M3 6l2 2 4-4"
                        fill="transparent"
                        strokeWidth="1.5"
                        stroke={color}
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeDasharray="8.5"
                        transition={transition}
                        initial={{
                            strokeDashoffset: initialAnimation ? (checked ? 8.5 : 0) : checked ? 0 : 8.5,
                        }}
                        animate={{
                            strokeDashoffset: checked ? 0 : 8.5,
                        }}
                    />
                </svg>
            </motion.div>
        </div>
    )
}

Checkbox.defaultProps = {
    height: 20,
    width: 20,
    text: "Get started!",
    activeBackground: "#0099ff",
    inactiveBackground: "#F3F3F3",
    hasBorder: false,
    radius: 5,
    borderWidth: 1,
    checkSize: 100,
    color: "white",
    initialAnimation: false,
    disabled: false,
    transition: { duration: 0.15, ease: [0.12, 0.23, 0.5, 1], type: "tween" },
}

// Learn more: https://framer.com/api/property-controls/
addPropertyControls(Checkbox, {
    isChecked: {
        title: "Checked",
        type: ControlType.Boolean,
        defaultValue: true,
        enabledTitle: "Yes",
        disabledTitle: "No",
    },
    disabled: {
        title: "Disabled",
        type: ControlType.Boolean,
        enabledTitle: "Yes",
        disabledTitle: "No",
    },
    hasBorder: {
        title: "Border",
        type: ControlType.Boolean,
        enabledTitle: "Yes",
        disabledTitle: "No",
    },
    borderWidth: {
        title: indentTitle("Width"),
        type: ControlType.Number,
        defaultValue: Checkbox.defaultProps.borderWidth,
        hidden: ({ hasBorder }) => !hasBorder,
    },
    activeBorder: {
        title: indentTitle("Active"),
        type: ControlType.Color,
        defaultValue: Checkbox.defaultProps.activeBackground,
        hidden: ({ hasBorder }) => !hasBorder,
    },
    inactiveBorder: {
        title: indentTitle("Inactive"),
        type: ControlType.Color,
        defaultValue: Checkbox.defaultProps.inactiveBackground,
        hidden: ({ hasBorder }) => !hasBorder,
    },
    activeBackground: {
        title: "Active",
        type: ControlType.Color,
        defaultValue: Checkbox.defaultProps.activeBackground,
    },
    inactiveBackground: {
        title: "Inactive",
        type: ControlType.Color,
        defaultValue: Checkbox.defaultProps.inactiveBackground,
    },
    color: {
        title: "Check",
        type: ControlType.Color,
        defaultValue: Checkbox.defaultProps.color,
    },
    checkSize: {
        title: "Check Size",
        type: ControlType.Number,
        unit: "%",
        min: 0,
        max: 100,
        defaultValue: Checkbox.defaultProps.checkSize,
    },

    radius: {
        title: "Radius",
        type: ControlType.FusedNumber,
        defaultValue: Checkbox.defaultProps.radius,
        toggleKey: "isMixed",
        toggleTitles: ["Radius", "Radius per corner"],
        valueKeys: ["topLeft", "topRight", "bottomRight", "bottomLeft"],
        valueLabels: ["TL", "TR", "BR", "BL"],
        min: 0,
    },
    transition: { title: "Animation", type: ControlType.Transition, defaultValue: Checkbox.defaultProps.transition },
    initialAnimation: {
        title: "On Load",
        type: ControlType.Boolean,
        enabledTitle: "Animate",
        disabledTitle: "Instant",
    },

    onToggle: { type: ControlType.EventHandler },
    onCheck: { type: ControlType.EventHandler },
    onUncheck: { type: ControlType.EventHandler },
})

const containerStyle: React.CSSProperties = {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    height: "100%",
    width: "100%",
    position: "absolute",
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
}
const checkboxStyle: React.CSSProperties = {
    width: "100%",
    height: "100%",
    borderRadius: 6,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    cursor: "pointer",
    WebkitTapHighlightColor: "rgba(0, 0, 0, 0)",
}
