import * as React from "react"
import { addPropertyControls, ControlType, NumberControlDescription, EnumControlDescription } from "framer"
import { containerStyles, defaultEvents, fontControls, fontSizeOptions } from "./lib/constants"
import { getRandomAvatar } from "./assets/avatars"

const containerStyle: React.CSSProperties = {
    textAlign: "center",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundRepeat: "no-repeat",
    backgroundSize: "cover",
    backgroundPosition: "center center",
}

const CACHE_PREFIX = `random-avatars_`

export function Avatar(props) {
    const {
        id,
        onClick,
        onMouseEnter,
        onMouseLeave,
        fontFamily,
        fontWeight,
        fontSize,
        backgroundColor,
        textColor,
        name,
        image,
        width,
        height,
        avatarType,
    } = props
    const instanceCacheKey = React.useMemo(
        () => `${CACHE_PREFIX}${id.includes("id_") ? id.substring(3, id.length) : id}`,
        [id]
    )
    const [mode, setMode] = React.useState(avatarType)
    const instanceCache = React.useMemo(() => localStorage.getItem(instanceCacheKey) || null, [])
    const [randomImageUrl, setRandomImageUrl] = React.useState(instanceCache)
    const imageUrl = React.useMemo(() => {
        if (mode === "custom" && image) {
            return image
        } else if (mode === "random" && randomImageUrl) {
            return randomImageUrl
        }
        return null
    }, [mode, image, randomImageUrl])

    const initials = React.useMemo(() => {
        if (mode === "custom" && !image && name) {
            return getInitials(name)
        }
        return ""
    }, [name, image, mode])

    React.useEffect(() => {
        if (avatarType === "custom") {
            setRandomImageUrl(null)
        } else if (avatarType === "random") {
            if (randomImageUrl) {
                return
            }
            if (instanceCache) {
                setRandomImageUrl(instanceCache)
                return
            }

            const randomAvatar = getRandomAvatar()

            setRandomImageUrl(randomAvatar)
            localStorage.setItem(instanceCacheKey, randomAvatar)
        }
    }, [avatarType, instanceCache, instanceCacheKey, randomImageUrl])

    React.useEffect(() => setMode(avatarType), [avatarType])

    const size = Math.min(width, height)

    return (
        <div style={{ ...containerStyles, overflow: "hidden" }}>
            <div
                style={{
                    ...{
                        ...(fontFamily && { fontFamily }),
                        fontWeight,
                        fontSize,
                    },
                    width: size,
                    height: size,
                    borderRadius: width,
                    backgroundPosition: "center",
                    backgroundSize: "cover",
                    backgroundRepeat: "no-repeat",
                    backgroundImage: imageUrl ? `url(${imageUrl})` : undefined,
                    backgroundColor: backgroundColor,
                    textAlign: "center",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    color: textColor,
                }}
                onClick={onClick}
                onMouseEnter={onMouseEnter}
                onMouseLeave={onMouseLeave}
            >
                {initials}
            </div>
        </div>
    )
}

Avatar.defaultProps = {
    height: 30,
    width: 30,
    name: "Koen Bok",
    textColor: "#fff",
    backgroundColor: "#09F",
    fontWeight: 600,
    fontSize: 11,
    avatarType: "random",
}

addPropertyControls(Avatar, {
    avatarType: {
        title: "Type",
        type: ControlType.Enum,
        displaySegmentedControl: true,
        options: ["random", "custom"],
        optionTitles: ["Random", "Custom"],
        defaultValue: Avatar.defaultProps.avatarType,
    },
    name: {
        title: "Name",
        type: ControlType.String,
        defaultValue: Avatar.defaultProps.name,
        placeholder: Avatar.defaultProps.name,
        hidden: props => props.avatarType !== "custom",
    },
    image: {
        title: "Image",
        type: ControlType.Image,
        hidden: props => props.avatarType !== "custom",
    },
    textColor: {
        title: "Text Color",
        type: ControlType.Color,
        defaultValue: Avatar.defaultProps.textColor,
        hidden: props => props.avatarType !== "custom",
    },
    backgroundColor: {
        title: "Bg Color",
        type: ControlType.Color,
        defaultValue: Avatar.defaultProps.backgroundColor,
        hidden: props => props.avatarType !== "custom",
    },
    ...Object.keys(fontControls).reduce((result, key) => {
        result[key] = {
            ...fontControls[key],
            hidden: props => props.avatarType !== "custom",
        }
        return result
    }, {}),
    fontSize: {
        ...(fontSizeOptions as NumberControlDescription),
        defaultValue: Avatar.defaultProps.fontSize,
        hidden: props => props.avatarType !== "custom",
    },
    fontWeight: {
        ...(fontControls.fontWeight as EnumControlDescription),
        defaultValue: Avatar.defaultProps.fontWeight,
        hidden: props => props.avatarType !== "custom",
    },
    ...defaultEvents,
})

function getInitials(name: string, maxInitials = 2) {
    return name
        .split(/\s/)
        .map(part => part.substring(0, 1).toUpperCase())
        .filter(v => !!v)
        .slice(0, maxInitials)
        .join("")
        .toUpperCase()
}
