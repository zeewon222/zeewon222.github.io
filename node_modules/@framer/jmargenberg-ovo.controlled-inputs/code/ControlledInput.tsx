import * as React from "react";
import { PropertyControls, ControlType, FrameProperties } from "framer";

enum InputType {
  text = "text",
  number = "number",
  password = "password",
  textArea = "textarea",
  select = "select"
}

enum Styling {
  standard = "Standard",
  transparent = "Transparent",
  css = "CSS Class"
}

const transparentStyle: React.CSSProperties = {
  color: "#000",
  background: "transparent",
  border: "none",
  boxShadow: "none !important",
  display: "block",
  alignContent: "center",
  justifyContent: "space-around",
  textAlign: "left",
  padding: 4,
  fontSize: 14,
  outline: "none",
  resize: "none",
  WebkitAppearance: "none"
};

interface Props extends FrameProperties {
  value: string;
  type: InputType;

  styling: Styling;
  className: string;

  placeholder: string;
  disabled: boolean;
  readOnly: boolean;

  selectOptions: string[];

  numberMin: number;
  numberMax: number;
  numberStep: number;

  onBlur: (event: any) => void;
  onFocus: (event: any) => void;
  onMouseEnter: (event: any) => void;
  onMouseLeave: (event: any) => void;
  onValueChange: (value: string) => void;
}

export class ControlledInput extends React.Component<Props> {
  static defaultProps = {
    height: 40,
    width: 150,

    value: "",
    type: InputType.text,

    styling: Styling.standard,
    className: "my-input-class",

    placeholder: "Start typing...",
    disabled: false,
    readOnly: false,

    selectOptions: [],

    numberMin: 0,
    numberMax: 100,
    numberStep: 1,

    onBlur: () => {},
    onFocus: () => {},
    onMouseEnter: () => {},
    onMouseLeave: () => {},
    onValueChange: () => {}
  };

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    type: {
      type: ControlType.Enum,
      title: "Type",
      options: [
        InputType.text,
        InputType.number,
        InputType.password,
        InputType.textArea,
        InputType.select
      ],
      optionTitles: ["Text", "Number", "Password", "Text Area", "Select"]
    },

    styling: {
      type: ControlType.Enum,
      title: "Styling",
      options: [Styling.standard, Styling.transparent, Styling.css],
      optionTitles: ["Standard", "Transparent", "CSS Class"]
    },
    className: {
      type: ControlType.String,
      title: "CSS Classname",
      hidden: ({ styling }) => styling != Styling.css
    },

    placeholder: {
      type: ControlType.String,
      title: "Placeholder",
      hidden: ({ type }) => type == InputType.select
    },
    disabled: {
      type: ControlType.Boolean,
      title: "Disabled"
    },
    readOnly: {
      type: ControlType.Boolean,
      title: "Readonly"
    },

    selectOptions: {
      type: ControlType.Array,
      title: "Select Options",
      propertyControl: { type: ControlType.String },
      hidden: ({ type }) => type != InputType.select
    },

    numberMin: {
      type: ControlType.Number,
      title: "Minimum",
      hidden: props => props.type != InputType.number
    },
    numberMax: {
      type: ControlType.Number,
      title: "Maximum",
      hidden: props => props.type != InputType.number
    },
    numberStep: {
      type: ControlType.Number,
      title: "Step",
      hidden: ({ type }) => type != InputType.number
    }
  };

  render() {
    const {
      value,
      type,
      styling,
      className,

      placeholder,
      disabled,
      readOnly,

      selectOptions,

      numberMin,
      numberMax,
      numberStep,

      onBlur,
      onFocus,
      onMouseEnter,
      onMouseLeave,
      onValueChange
    } = this.props;

    const onChange = (
      event:
        | React.ChangeEvent<HTMLInputElement>
        | React.ChangeEvent<HTMLTextAreaElement>
        | React.ChangeEvent<HTMLSelectElement>
    ) => onValueChange(event.target.value);
    const fullSize = { height: "100%", width: "100%" };

    const universalProps = {
      value,
      onChange,
      style:
        styling == Styling.transparent
          ? { ...fullSize, ...transparentStyle }
          : fullSize,
      className: styling == Styling.css ? className : undefined,

      placeholder,
      disabled,
      readOnly,

      onBlur,
      onFocus,
      onMouseEnter,
      onMouseLeave
    };

    console.log(this.props);

    let inputElement;

    switch (type) {
      case InputType.text:
      case InputType.password:
        inputElement = <input type={type} {...universalProps} />;
        break;
      case InputType.number:
        inputElement = (
          <input
            type={type}
            min={numberMin}
            max={numberMax}
            step={numberStep}
            {...universalProps}
          />
        );
        break;
      case InputType.textArea:
        inputElement = <textarea {...universalProps} />;
        break;
      case InputType.select:
        inputElement = (
          <select {...universalProps}>
            {selectOptions.map((option: string) => (
              <option value={option} key={option}>
                {option}
              </option>
            ))}{" "}
          </select>
        );
    }

    return inputElement;
  }
}
